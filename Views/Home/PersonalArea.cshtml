 @model ChessStatistics.ViewModels.UserModel

@{
    ViewData["CurrentPage"] = "PersonalArea";
    Layout = "_Layout";
}
 <style>
    body {
        background-color: #f4f4f4;
    }
    .container {
        width: 80%;
        margin: 20px auto;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    h1 {
        text-align: center;
        color: #333;
        margin-bottom: 20px;
    }
    h2 {
        text-align: center;
        color: #333;
        margin-bottom: 20px;
    }
    .user-info {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 20px;
    }
    .user-info img {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        margin-bottom: 10px;
    }
    .user-info h2 {
        margin: 0 0 10px;
        color: #333;
        font-size: 32px;
    }
    .card-row {
        display: flex;
        justify-content: space-between;
        width: 100%;
        margin-bottom: 20px;
    }
    .card {
        background: #2c3e50;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin: 10px;
        padding: 20px;
        width: calc(33% - 20px);
        text-align: center;
        color: #ecf0f1;
    }
    .card p {
        margin: 5px 0;
        color: #3498db;
        font-size: 16px;
    }
    .progress-bar-container {
        margin: 20px 0;
    }
    .progress-bar-container p {
        margin-bottom: 5px;
    }
    .progress-bar {
        background-color: #e0e0e0;
        border-radius: 20px;
        overflow: hidden;
        height: 20px;
        position: relative;
    }
    .progress-bar div {
        height: 100%;
        width: 0;
        background-color: #3498db;
        transition: width 0.3s;
    }
    .progress-bar span {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        color: #fff;
        font-size: 12px;
    }
    .ratings {
        display: flex;
        justify-content: space-around;
        margin: 20px 0;
    }
    .ratings div {
        text-align: center;
    }
    .ratings div i {
        font-size: 24px;
        color: #3498db;
        margin-bottom: 5px;
    }
    .games-list {
        width: 100%;
        max-width: 800px;
        margin-top: 20px;
    }
    .game-item {
        background: #2c3e50;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin: 10px 0;
        padding: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: #ecf0f1;
    }
    .game-item div {
        flex: 1;
        text-align: center;
        padding: 5px;
    }
    .game-item i {
        margin-right: 5px;
        color: #3498db;
    }
</style>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<div class="emptySpace"></div>
<div id="content" class="container justify-content-center">
    

    @if (ViewBag.IsUserConnectedToThePlayer)
    {
        <div class="user-info">
            <img src="https://via.placeholder.com/150" alt="Профиль">
            <h2 class="text-light"> Личный кабинет: @Model.FIO </h2>
        </div>
        <div class="card-row">
            <div class="card">
                <p id="classicRank">Текущий разряд (Классика): Мастер ФИДЕ</p>
                <div class="ratings">
                    <div>
                        <i class="fas fa-clock"></i>
                        <p>Классика: @Model.Player.Rating.RatingClassic</p>
                    </div>
                </div>
                <p id="classicNextRank">Прогресс до следующего разряда (Классика):</p>
                <div class="progress-bar">
                    <div id="classicProgressBar"></div>
                    <span id="classicProgressText">60%</span>
                </div>
            </div>
            <div class="card">
                <p id="rapidRank">Текущий разряд (Рапид): Международный мастер</p>
                <div class="ratings">
                    <div>
                        <i class="fas fa-stopwatch"></i>
                        <p>Рапид: @Model.Player.Rating.RatingRapid</p>
                    </div>
                </div>
                <p id="rapidNextRank">Прогресс до следующего разряда (Рапид):</p>
                <div class="progress-bar">
                    <div id="rapidProgressBar"></div>
                    <span id="rapidProgressText">70%</span>
                </div>
            </div>
            <div class="card">
                <p id="blitzRank">Текущее (Блиц): Мастер ФИДЕ</p>
                <div class="ratings">
                    <div>
                        <i class="fas fa-tachometer-alt"></i>
                        <p>Блиц: @Model.Player.Rating.RatingBlitz</p>
                    </div>
                </div>
                <p id="blitzNextRank">Прогресс до следующего разряда (Блиц):</p>
                <div class="progress-bar">
                    <div id="blitzProgressBar"></div>
                    <span id="blitzProgressText">80%</span>
                </div>
            </div>
        </div>

        <h5 class="text-light">Ваши игры</h5>
            <div class="game-item">
                    <div><i class="fas fa-user"></i>@Model.FIO</div>
                    <div><i class="fas fa-chess-king"></i>Белые</div>
                    <div><i class="fas fa-trophy"></i>результат</div>
                    <div><i class="fas fa-calendar-alt"></i>Дата</div>
                    </div>
            <tbody>
                @foreach (var game in Model.Games)
                {
                    <tr>
                        <th scope="row">
                            <a asp-controller="Home" asp-action="Player" asp-route-idPlayer="@game.IdPlayerWhite">
                                <h5 class='text-text-info' id="userFIO">@game.PlayerWhite.FIO</h5>
                            </a>

                            @(game.RatingWhite + " " + game.RatingWhiteChange)
                        </th>
                        <td>
                            <a asp-controller="Home" asp-action="Player" asp-route-idPlayer="@game.IdPlayerBlack">
                                <h5 class='text-text-info' id="userFIO">@game.PlayerBlack.FIO</h5>
                            </a>

                            @(game.RatingBlack + " " + game.RatingBlackChange)
                        </td>
                        <td>@(game.GameResult == GameResult.WhiteWin ? "1-0" : game.GameResult == GameResult.Draw ? "1/2" : "0-1")</td>
                        <td>@game.Date.ToString("D")</td>
                    </tr>
                }
            </tbody>
            
    }
else if(ViewBag.IsUserRequestedLinkWithPlayer)
{
    <h5 class="text-info"> Вы запросили связку своего аккаунта с профилем игрока, ожидайте подтвержения администратора</h5>
}
else
{
    <h5 class="text-info"> Cвяжите ваш аккаунт с профилем игрока </h5>
    <button type="submit" class="btn btn-primary"
            data-toggle="modal" data-target="#linkUserWithPlayer">
        Связать аккаунт с профилем игрока
    </button>
}


<div class='modal fade' id='linkUserWithPlayer' tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered " role="document">
        <div class="modal-content text-light bg-dark">
            <div class="modal-header ">
                <h5 class="modal-title text-info">Cвязать аккаунт со своим игровым профилем</h5>
                <button class="close autorization" type="button" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <form asp-controller="LinkUserWithPlayer" asp-action="LinkUser" method="post">
                        <input id="IdUser" name="IdUser" value="@Model.IdUser" class="d-none">
                        <div class="form-group">
                            <label for="PlayerProfile">Выберите ваш игровой профиль</label>
                            <select id="PlayerProfile"
                                    name="IdPlayer"
                                    class="form-control">
                                @foreach (var player in ViewBag.PlayersNotLinkedWithUser)
                                {
                                    <option value="@player.IdPlayer">@player.FIO</option>
                                }
                            </select>
                        </div>

                        <button type="submit" class="btn btn-primary">
                            Cвязать
                        </button>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Отмена</button>
            </div>
        </div>
    </div>
</div>
</div>
<script>
        function getCurrentRank(rating) {
            if (rating >= 2500) return "Гроссмейстер";
            if (rating < 2500 && rating >= 2400) return "Международный мастер";
            if (rating < 2400 && rating >= 2300) return "Мастер ФИДЕ";
            if (rating < 2300 && rating >= 2000) return "Кандидат в мастера спорта";
            if (rating < 2000 && rating >= 1800) return "Первый разряд";
            if (rating < 1800 && rating >= 1600) return "Второй разряд";
            if (rating < 1600 && rating >= 1400) return "Третий разряд";
            if (rating < 1400 && rating >= 1200) return "Четвертый разряд";
            if (rating < 1200) return "Без разряда";
        }

        function getNextRank(currentRank) {
            const ranks = [
                "Без разряда",
                "Четвертый разряд",
                "Третий разряд",
                "Второй разряд",
                "Первый разряд",
                "Кандидат в мастера спорта",
                "Мастер ФИДЕ",
                "Международный мастер",
                "Гроссмейстер"
            ];
            const ranksGenitive = [
                "Без разряда",
                "Четвертого разряда",
                "Третьего разряда",
                "Второго разряда",
                "Первого разряда",
                "Кандидата в мастера спорта",
                "Мастера ФИДЕ",
                "Международного мастера",
                "Гроссмейстера"
            ];
            const currentIndex = ranks.indexOf(currentRank);
            return ranksGenitive[currentIndex + 1];
        }

        function getProgressInPercents(currentRating) {
            let progress = 0;
            let lengthOfProgress = 0;

            if (currentRating >= 1200) {
                progress = currentRating - 1200;
                lengthOfProgress = 1200;
            }

            if (currentRating >= 1400) {
                progress = currentRating - 1400;
                lengthOfProgress = 200;
            }

            if (currentRating >= 1600) {
                progress = currentRating - 1600;
                lengthOfProgress = 200;
            }

            if (currentRating >= 1800) {
                progress = currentRating - 1800;
                lengthOfProgress = 200;
            }

            if (currentRating >= 2000) {
                progress = currentRating - 2000;
                lengthOfProgress = 300;
            }

            if (currentRating >= 2300) {
                progress = currentRating - 2300;
                lengthOfProgress = 100;
            }

            if (currentRating >= 2400) {
                progress = currentRating - 2400;
                lengthOfProgress = 100;
            }
            if (currentRating >= 2500) return 100;
            console.log(progress);
            console.log(lengthOfProgress);
            return (progress / lengthOfProgress) * 100;
        }

        function updateProgressBar(bar, text, currentRating) {
            const progress = getProgressInPercents(currentRating);
            bar.style.width = progress + '%';
            text.textContent = progress.toFixed(0) + '%';
        }

        const currentRatingClassic = 2450;
        const currentRatingRapid = 1450;
        const currentRatingBlitz = 1550;

        const classicRank = getCurrentRank(currentRatingClassic);
        const rapidRank = getCurrentRank(currentRatingRapid);
        const blitzRank = getCurrentRank(currentRatingBlitz);

        document.getElementById('classicRank').textContent = `Текущий разряд (Классика): ${classicRank}`;
        document.getElementById('rapidRank').textContent = `Текущий разряд (Рапид): ${rapidRank}`;
        document.getElementById('blitzRank').textContent = `Текущий разряд (Блиц): ${blitzRank}`;

        document.getElementById('classicNextRank').textContent = `Осталось до: ${getNextRank(classicRank)}`;
        document.getElementById('rapidNextRank').textContent = `Осталось до: ${getNextRank(rapidRank)}`;
        document.getElementById('blitzNextRank').textContent = `Осталось до: ${getNextRank(blitzRank)}`;

        updateProgressBar(document.getElementById('classicProgressBar'), document.getElementById('classicProgressText'), currentRatingClassic);
        updateProgressBar(document.getElementById('rapidProgressBar'), document.getElementById('rapidProgressText'), currentRatingRapid);
        updateProgressBar(document.getElementById('blitzProgressBar'), document.getElementById('blitzProgressText'), currentRatingBlitz);
    </script>
<div class="emptySpace"></div>
